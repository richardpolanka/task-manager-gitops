apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-code
data:
  server.js: |
    const http = require('http');
    const url = require('url');
    
    const server = http.createServer((req, res) => {
      const path = url.parse(req.url, true).pathname;
      
      if (path === '/') {
        res.setHeader('Content-Type', 'text/html');
        res.writeHead(200);
        res.end('<html><head><title>GitOps Task Manager</title></head><body><h1>GitOps Task Manager</h1><p>Pod: ' + (process.env.HOSTNAME || 'unknown') + '</p><div id="app">Loading...</div><script>fetch("/api/tasks").then(r=>r.json()).then(tasks=>document.getElementById("app").innerHTML=tasks.map(t=>"<p>"+t.title+"</p>").join("")).catch(e=>document.getElementById("app").innerHTML="Error: "+e.message)</script></body></html>');
      } else if (path.startsWith('/api/')) {
        const apiPath = path.replace('/api', '');
        const options = {
          hostname: 'task-api-service',
          port: 3001,
          path: apiPath,
          method: req.method,
          headers: req.headers
        };
        
        const apiReq = http.request(options, (apiRes) => {
          res.writeHead(apiRes.statusCode, apiRes.headers);
          apiRes.pipe(res);
        });
        
        apiReq.on('error', (error) => {
          res.writeHead(500);
          res.end('API Error');
        });
        
        req.pipe(apiReq);
      } else {
        res.writeHead(404);
        res.end('Not Found');
      }
    });
    
    server.listen(3000, '0.0.0.0', () => {
      console.log('Frontend running on port 3000');
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-frontend
  labels:
    app: task-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: task-frontend
  template:
    metadata:
      labels:
        app: task-frontend
    spec:
      containers:
      - name: frontend
        image: node:18-alpine
        command: ["node", "/app/server.js"]
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: frontend-code
          mountPath: /app
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: frontend-code
        configMap:
          name: frontend-code
---
apiVersion: v1
kind: Service
metadata:
  name: task-frontend-service
  labels:
    app: task-frontend
spec:
  selector:
    app: task-frontend
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP
