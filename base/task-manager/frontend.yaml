apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
      <title>GitOps Task Manager v2.0</title>
      <link rel="stylesheet" href="/styles.css">
    </head>
    <body>
      <div class="container">
        <h1>íº€ GitOps Task Manager</h1>
        <div class="subtitle">Professional Kubernetes Deployment</div>
        <div class="pod" id="podInfo">Loading pod info...</div>
        
        <div class="stats">
          <div class="stat">
            <div class="stat-number" id="taskCount">-</div>
            <div class="stat-label">Total Tasks</div>
          </div>
          <div class="stat">
            <div class="stat-number" id="requestCount">-</div>
            <div class="stat-label">API Requests</div>
          </div>
        </div>
        
        <div class="controls">
          <input type="text" id="taskInput" placeholder="Enter your new task...">
          <button onclick="addTask()">Add Task</button>
          <button onclick="loadTasks()">Refresh</button>
          <button onclick="checkHealth()">Health Check</button>
        </div>
        
        <div id="message"></div>
        <div id="tasks" class="loading">Loading tasks...</div>
      </div>
      
      <script src="/app.js"></script>
    </body>
    </html>
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-css
data:
  styles.css: |
    body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',sans-serif;margin:0;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);min-height:100vh;display:flex;align-items:center;justify-content:center}.container{max-width:900px;background:white;padding:40px;border-radius:16px;box-shadow:0 20px 40px rgba(0,0,0,0.1);margin:20px}h1{color:#333;text-align:center;margin-bottom:10px;font-size:2.5em;font-weight:300}.subtitle{text-align:center;color:#666;margin-bottom:30px;font-size:1.1em}.pod{text-align:center;color:#888;margin-bottom:30px;padding:10px;background:#f8f9fa;border-radius:8px;font-family:monospace}.controls{display:flex;gap:15px;justify-content:center;margin-bottom:40px;flex-wrap:wrap}input{padding:12px 16px;border:2px solid #e1e5e9;border-radius:8px;width:350px;font-size:16px;transition:border-color 0.3s}input:focus{outline:none;border-color:#667eea}button{background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:white;padding:12px 24px;border:none;border-radius:8px;cursor:pointer;font-size:16px;font-weight:500;transition:transform 0.2s,box-shadow 0.2s}button:hover{transform:translateY(-2px);box-shadow:0 10px 20px rgba(102,126,234,0.3)}.task{padding:20px;margin:15px 0;background:#f8f9fa;border-left:5px solid #667eea;border-radius:8px;transition:transform 0.2s}.task:hover{transform:translateX(5px)}.task-title{font-weight:600;font-size:1.1em;color:#333;margin-bottom:5px}.task-meta{font-size:0.9em;color:#666}.error{color:#e74c3c;background:#fadbd8;padding:15px;border-radius:8px;border-left:5px solid #e74c3c;margin:15px 0}.success{color:#27ae60;background:#d5f4e6;padding:15px;border-radius:8px;border-left:5px solid #27ae60;margin:15px 0}.loading{text-align:center;color:#666;font-style:italic;padding:40px}.stats{display:flex;gap:20px;justify-content:center;margin-bottom:20px;flex-wrap:wrap}.stat{background:#f8f9fa;padding:15px 25px;border-radius:8px;text-align:center;min-width:120px}.stat-number{font-size:1.5em;font-weight:bold;color:#667eea}.stat-label{font-size:0.9em;color:#666;margin-top:5px}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-js
data:
  app.js: |
    let currentStats={tasks:0,requests:0};document.addEventListener('DOMContentLoaded',function(){fetch('/api/health').then(r=>r.json()).then(data=>{document.getElementById('podInfo').textContent='Running on Pod: '+(data.hostname||'unknown')}).catch(()=>{document.getElementById('podInfo').textContent='Pod info unavailable'})});function showMessage(text,type='error'){const messageDiv=document.getElementById('message');messageDiv.className=type;messageDiv.innerHTML=text;setTimeout(()=>{messageDiv.innerHTML='';messageDiv.className=''},4000)}function updateStats(){document.getElementById('taskCount').textContent=currentStats.tasks;document.getElementById('requestCount').textContent=currentStats.requests}async function loadTasks(){try{const response=await fetch('/api/tasks');if(!response.ok)throw new Error('HTTP '+response.status);const tasks=await response.json();currentStats.tasks=tasks.length;const tasksHtml=tasks.map(task=>'<div class="task">'+'<div class="task-title">'+escapeHtml(task.title)+'</div>'+'<div class="task-meta">ID: '+task.id+' â€¢ Created: '+formatDate(task.created_at)+'</div>'+'</div>').join('');document.getElementById('tasks').innerHTML=tasksHtml||'<div class="loading">No tasks yet. Create your first task above!</div>';updateStats();showMessage('Tasks loaded successfully ('+tasks.length+' items)','success')}catch(error){document.getElementById('tasks').innerHTML='<div class="error">Error loading tasks: '+error.message+'</div>';showMessage('Error loading tasks: '+error.message,'error')}}async function addTask(){const input=document.getElementById('taskInput');const title=input.value.trim();if(!title){showMessage('Please enter a task title','error');input.focus();return}try{const response=await fetch('/api/tasks',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title:title,completed:false})});if(response.ok){input.value='';showMessage('Task "'+title+'" added successfully!','success');setTimeout(loadTasks,500)}else{const errorData=await response.json();throw new Error(errorData.error||'HTTP '+response.status)}}catch(error){showMessage('Error adding task: '+error.message,'error')}}async function checkHealth(){try{const response=await fetch('/api/health');const health=await response.json();currentStats.requests=health.requests||0;updateStats();showMessage('Health Check: '+health.status+' â€¢ DB: '+health.database+' â€¢ Pod: '+health.hostname+' â€¢ Requests: '+health.requests,'success')}catch(error){showMessage('Health check failed: '+error.message,'error')}}function escapeHtml(text){const div=document.createElement('div');div.textContent=text;return div.innerHTML}function formatDate(dateString){if(!dateString)return'Unknown';try{return new Date(dateString).toLocaleDateString()}catch(e){return'Unknown'}}document.getElementById('taskInput').addEventListener('keypress',function(e){if(e.key==='Enter')addTask()});loadTasks();setInterval(checkHealth,30000);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-server
data:
  server.js: |
    const http = require('http');
    const fs = require('fs');
    const path = require('path');
    
    const server = http.createServer((req, res) => {
      const urlPath = require('url').parse(req.url, true).pathname;
      
      if (urlPath === '/' || urlPath === '/index.html') {
        res.setHeader('Content-Type', 'text/html');
        res.writeHead(200);
        res.end(fs.readFileSync('/app/static/index.html', 'utf8'));
      } else if (urlPath === '/styles.css') {
        res.setHeader('Content-Type', 'text/css');
        res.writeHead(200);
        res.end(fs.readFileSync('/app/static/styles.css', 'utf8'));
      } else if (urlPath === '/app.js') {
        res.setHeader('Content-Type', 'application/javascript');
        res.writeHead(200);
        res.end(fs.readFileSync('/app/static/app.js', 'utf8'));
      } else if (urlPath.startsWith('/api/')) {
        const options = {
          hostname: 'task-api-service',
          port: 3001,
          path: urlPath.replace('/api', ''),
          method: req.method,
          headers: req.headers
        };
        
        const apiReq = http.request(options, (apiRes) => {
          res.writeHead(apiRes.statusCode, apiRes.headers);
          apiRes.pipe(res);
        });
        
        apiReq.on('error', () => {
          res.writeHead(500);
          res.end('API Error');
        });
        
        req.pipe(apiReq);
      } else {
        res.writeHead(404);
        res.end('Not Found');
      }
    });
    
    server.listen(3000, '0.0.0.0', () => {
      console.log('Static frontend server running on port 3000');
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-frontend
  labels:
    app: task-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: task-frontend
  template:
    metadata:
      labels:
        app: task-frontend
    spec:
      containers:
      - name: frontend
        image: node:18-alpine
        command: ["node", "/app/server.js"]
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: server-code
          mountPath: /app
        - name: static-html
          mountPath: /app/static/index.html
          subPath: index.html
        - name: static-css  
          mountPath: /app/static/styles.css
          subPath: styles.css
        - name: static-js
          mountPath: /app/static/app.js
          subPath: app.js
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: server-code
        configMap:
          name: frontend-server
      - name: static-html
        configMap:
          name: frontend-html
      - name: static-css
        configMap:
          name: frontend-css
      - name: static-js
        configMap:
          name: frontend-js
---
apiVersion: v1
kind: Service
metadata:
  name: task-frontend-service
  labels:
    app: task-frontend
spec:
  selector:
    app: task-frontend
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP
