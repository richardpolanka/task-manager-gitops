apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-with-metrics
data:
  server.js: |
    const http = require('http');
    const url = require('url');
    const { spawn } = require('child_process');
    
    let requestCount = 0;
    let errorCount = 0;
    
    function queryPostgres(sql, callback) {
      const psql = spawn('psql', [
        '-h', 'postgres-service', 
        '-U', 'taskuser', 
        '-d', 'taskmanager',
        '-t', '-A', '-c', sql
      ], { 
        env: { ...process.env, PGPASSWORD: 'taskpass123' } 
      });
      
      let stdout = '';
      let stderr = '';
      
      psql.stdout.on('data', (data) => {
        stdout += data.toString();
      });
      
      psql.stderr.on('data', (data) => {
        stderr += data.toString();
      });
      
      psql.on('close', (code) => {
        if (code === 0) {
          callback(null, stdout.trim());
        } else {
          errorCount++;
          callback(new Error(stderr.trim()), null);
        }
      });
    }
    
    const server = http.createServer((req, res) => {
      const path = url.parse(req.url, true).pathname;
      requestCount++;
      
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      res.setHeader('Content-Type', 'application/json');
      
      if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
      }
      
      if (path === '/metrics') {
        res.setHeader('Content-Type', 'text/plain');
        res.writeHead(200);
        res.end('task_api_requests_total ' + requestCount + '\ntask_api_errors_total ' + errorCount + '\n');
        return;
      }
      
      if (path === '/health') {
        queryPostgres('SELECT NOW()', (err) => {
          res.writeHead(200);
          res.end(JSON.stringify({
            status: 'healthy',
            database: err ? 'disconnected' : 'connected',
            hostname: process.env.HOSTNAME || 'unknown',
            requests: requestCount,
            errors: errorCount
          }));
        });
        return;
      }
      
      if (path === '/tasks' && req.method === 'GET') {
        queryPostgres('SELECT row_to_json(t) FROM (SELECT * FROM tasks ORDER BY id) t', (err, result) => {
          if (err) {
            errorCount++;
            res.writeHead(500);
            res.end(JSON.stringify({ error: err.message }));
          } else {
            const lines = result.split('\n').filter(line => line.trim());
            const tasks = lines.map(line => {
              try {
                return JSON.parse(line);
              } catch(e) {
                return null;
              }
            }).filter(task => task !== null);
            
            res.writeHead(200);
            res.end(JSON.stringify(tasks));
          }
        });
        return;
      }
      
      if (path === '/tasks' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => {
          body += chunk;
        });
        req.on('end', () => {
          try {
            const newTask = JSON.parse(body);
            const title = newTask.title.replace(/'/g, "''");
            const sql = "INSERT INTO tasks (title, completed) VALUES ('" + title + "', false) RETURNING row_to_json(tasks)";
            
            queryPostgres(sql, (err, result) => {
              if (err) {
                errorCount++;
                res.writeHead(500);
                res.end(JSON.stringify({ error: err.message }));
              } else {
                res.writeHead(201);
                res.end(JSON.stringify(JSON.parse(result.trim())));
              }
            });
          } catch(e) {
            errorCount++;
            res.writeHead(400);
            res.end(JSON.stringify({ error: 'Invalid JSON' }));
          }
        });
        return;
      }
      
      res.writeHead(404);
      res.end(JSON.stringify({ error: 'Not Found' }));
    });
    
    server.listen(3001, '0.0.0.0', () => {
      console.log('Task API running on port 3001');
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-api
  labels:
    app: task-api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: task-api
  template:
    metadata:
      labels:
        app: task-api
    spec:
      containers:
      - name: task-api
        image: postgres:15-alpine
        command: ["sh", "-c", "apk add --no-cache nodejs npm && node /app/server.js"]
        ports:
        - containerPort: 3001
        env:
        - name: PGPASSWORD
          value: "taskpass123"
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: app-code
        configMap:
          name: backend-with-metrics
---
apiVersion: v1
kind: Service
metadata:
  name: task-api-service
  labels:
    app: task-api
spec:
  selector:
    app: task-api
  ports:
  - name: api-port
    protocol: TCP
    port: 3001
    targetPort: 3001
  type: ClusterIP
