apiVersion: v1
kind: Namespace
metadata:
  name: task-manager-gitops
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: task-manager-gitops
type: Opaque
data:
  POSTGRES_DB: dGFza21hbmFnZXI=
  POSTGRES_USER: dGFza3VzZXI=
  POSTGRES_PASSWORD: dGFza3Bhc3MxMjM=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: task-manager-gitops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        envFrom:
        - secretRef:
            name: postgres-secret
        env:
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "300m"
      volumes:
      - name: postgres-storage
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: task-manager-gitops
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-code
  namespace: task-manager-gitops
data:
  server.js: |
    const http = require('http');
    const { spawn } = require('child_process');
    
    let requestCount = 0;
    
    function queryPostgres(sql, callback) {
      const psql = spawn('psql', ['-h', 'postgres-service', '-U', 'taskuser', '-d', 'taskmanager', '-t', '-A', '-c', sql], {
        env: { ...process.env, PGPASSWORD: 'taskpass123' }
      });
      
      let stdout = '';
      psql.stdout.on('data', (data) => stdout += data.toString());
      psql.on('close', (code) => {
        if (code === 0) callback(null, stdout.trim());
        else callback(new Error('DB Error'), null);
      });
    }
    
    const server = http.createServer((req, res) => {
      const path = require('url').parse(req.url, true).pathname;
      requestCount++;
      
      res.setHeader('Access-Control-Allow-Origin', '*');
      res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
      res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
      res.setHeader('Content-Type', 'application/json');
      
      if (req.method === 'OPTIONS') { res.writeHead(200); res.end(); return; }
      
      if (path === '/health') {
        res.writeHead(200);
        res.end(JSON.stringify({status: 'healthy', hostname: process.env.HOSTNAME, requests: requestCount}));
        return;
      }
      
      if (path === '/tasks' && req.method === 'GET') {
        queryPostgres('SELECT row_to_json(t) FROM (SELECT * FROM tasks ORDER BY id) t', (err, result) => {
          if (err) {
            res.writeHead(500);
            res.end(JSON.stringify({error: err.message}));
          } else {
            const tasks = result.split('\n').filter(line => line.trim()).map(line => {
              try { return JSON.parse(line); } catch(e) { return null; }
            }).filter(task => task !== null);
            res.writeHead(200);
            res.end(JSON.stringify(tasks));
          }
        });
        return;
      }
      
      if (path === '/tasks' && req.method === 'POST') {
        let body = '';
        req.on('data', chunk => body += chunk);
        req.on('end', () => {
          try {
            const newTask = JSON.parse(body);
            const title = newTask.title.replace(/'/g, "''");
            queryPostgres("INSERT INTO tasks (title, completed) VALUES ('" + title + "', false) RETURNING row_to_json(tasks)", (err, result) => {
              if (err) {
                res.writeHead(500);
                res.end(JSON.stringify({error: err.message}));
              } else {
                res.writeHead(201);
                res.end(JSON.stringify(JSON.parse(result.trim())));
              }
            });
          } catch(e) {
            res.writeHead(400);
            res.end(JSON.stringify({error: 'Invalid JSON'}));
          }
        });
        return;
      }
      
      res.writeHead(404);
      res.end(JSON.stringify({error: 'Not Found'}));
    });
    
    server.listen(3001, '0.0.0.0', () => console.log('API running on port 3001'));
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-api
  namespace: task-manager-gitops
spec:
  replicas: 4
  selector:
    matchLabels:
      app: task-api
  template:
    metadata:
      labels:
        app: task-api
    spec:
      containers:
      - name: task-api
        image: postgres:15-alpine
        command: ["sh", "-c", "apk add --no-cache nodejs npm && node /app/server.js"]
        ports:
        - containerPort: 3001
        env:
        - name: PGPASSWORD
          value: "taskpass123"
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: app-code
        configMap:
          name: backend-code
---
apiVersion: v1
kind: Service
metadata:
  name: task-api-service
  namespace: task-manager-gitops
spec:
  type: NodePort
  ports:
  - port: 3001
    targetPort: 3001
    nodePort: 31003
  selector:
    app: task-api
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-code
  namespace: task-manager-gitops
data:
  server.js: |
    const http = require('http');
    
    const server = http.createServer((req, res) => {
      const path = require('url').parse(req.url, true).pathname;
      
      if (path === '/') {
        res.setHeader('Content-Type', 'text/html');
        res.writeHead(200);
        res.end('<html><head><title>GitOps Task Manager</title><style>body{font-family:Arial;margin:40px;background:#f5f5f5}.container{max-width:800px;margin:0 auto;background:white;padding:30px;border-radius:8px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}h1{color:#333;text-align:center}.pod{text-align:center;color:#666;margin-bottom:20px}.controls{text-align:center;margin-bottom:30px}input{padding:10px;margin:5px;border:1px solid #ddd;border-radius:4px;width:300px}button{background:#007acc;color:white;padding:10px 20px;border:none;border-radius:4px;cursor:pointer;margin:5px}button:hover{background:#005999}.task{padding:15px;margin:10px 0;background:#f9f9f9;border-left:4px solid #007acc;border-radius:4px}.error{color:red;background:#ffebee;padding:10px;border-radius:4px}.success{color:green;background:#e8f5e8;padding:10px;border-radius:4px}</style></head><body><div class="container"><h1>íº€ GitOps Task Manager</h1><div class="pod">Pod: ' + (process.env.HOSTNAME || 'unknown') + '</div><div class="controls"><input type="text" id="taskInput" placeholder="Enter new task..."><button onclick="addTask()">Add Task</button><button onclick="loadTasks()">Refresh</button><button onclick="checkHealth()">Health Check</button></div><div id="message"></div><div id="tasks">Loading tasks...</div></div><script>function showMessage(text,type){document.getElementById("message").innerHTML="<div class=\\""+type+"\\">"+text+"</div>";setTimeout(()=>document.getElementById("message").innerHTML="",3000)}async function loadTasks(){try{const response=await fetch("/api/tasks");if(!response.ok)throw new Error("HTTP "+response.status);const tasks=await response.json();const tasksHtml=tasks.map(task=>"<div class=\\"task\\"><strong>"+task.title+"</strong> <small>(ID: "+task.id+")</small></div>").join("");document.getElementById("tasks").innerHTML=tasksHtml||"<div>No tasks yet</div>";showMessage("Tasks loaded ("+tasks.length+" items)","success")}catch(error){document.getElementById("tasks").innerHTML="<div class=\\"error\\">Error: "+error.message+"</div>";showMessage("Error loading tasks: "+error.message,"error")}}async function addTask(){const input=document.getElementById("taskInput");const title=input.value.trim();if(!title){showMessage("Please enter a task title","error");return}try{const response=await fetch("/api/tasks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({title:title,completed:false})});if(response.ok){input.value="";loadTasks();showMessage("Task added successfully!","success")}else{throw new Error("HTTP "+response.status)}}catch(error){showMessage("Error adding task: "+error.message,"error")}}async function checkHealth(){try{const response=await fetch("/api/health");const health=await response.json();showMessage("Health: "+health.status+", Pod: "+health.hostname+", Requests: "+health.requests,"success")}catch(error){showMessage("Health check failed: "+error.message,"error")}}document.getElementById("taskInput").addEventListener("keypress",function(e){if(e.key==="Enter")addTask()});loadTasks()</script></body></html>');
      } else if (path.startsWith('/api/')) {
        const options = {
          hostname: 'task-api-service',
          port: 3001,
          path: path.replace('/api', ''),
          method: req.method,
          headers: req.headers
        };
        
        const apiReq = http.request(options, (apiRes) => {
          res.writeHead(apiRes.statusCode, apiRes.headers);
          apiRes.pipe(res);
        });
        
        apiReq.on('error', () => {
          res.writeHead(500);
          res.end('API Error');
        });
        
        req.pipe(apiReq);
      } else {
        res.writeHead(404);
        res.end('Not Found');
      }
    });
    
    server.listen(3000, '0.0.0.0', () => console.log('Frontend running on port 3000'));
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-frontend
  namespace: task-manager-gitops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: task-frontend
  template:
    metadata:
      labels:
        app: task-frontend
    spec:
      containers:
      - name: frontend
        image: node:18-alpine
        command: ["node", "/app/server.js"]
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: frontend-code
          mountPath: /app
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: frontend-code
        configMap:
          name: frontend-code
---
apiVersion: v1
kind: Service
metadata:
  name: task-frontend-service
  namespace: task-manager-gitops
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 31002
  selector:
    app: task-frontend
